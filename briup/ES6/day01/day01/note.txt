NodeJS环境中支持绝大部分的ES6的功能
	
ES6新特性
	语法方面
		let   var
		let a = 1;
		const  常量命名
			const schoolName = '杰普';
		...
		(形参)=>{函数体}  箭头函数
		function add(a,b){
			return a+b;
		}
		(a,b)=>{return a+b}
		(a,b)=>{a+b}
		a=>a
		(a)=>{return a;}
		.....
	功能方面
		对对象、函数、数组进行了功能性的扩展
		复制一个对象
		let obj = {
			name:'zhangsan',
			age:12
		};
		//复制对象
		//1.json
		JSON.parse(JSON.stringify(obj))
		//2方式 遍历对象，然后将属性和属性值放置到一个新对象里
		let obj2 = {};
		for(var key in obj){
			obj2[key] = obj[key];
		}
		//3方式es6
		let obj2 = {};
		Object.assign(obj2,obj)
		obj2	

		let o1 = {name:'zhangsan'}
		let o2 = {age:12}
		let o3 = {gender:'男'};
		let obj = {};
		Object.assign(obj,o1,o2,o3);
		.......
		Set  Map  Class
		用类去创建实例  构造器
		用类去实现继承  extends
		Promise 承诺对象
		模块化...    NodeJS模块化

	webpack打包工具
		Vue   .vue   .js
			index.html
			static文件夹
				css
				js
		React  .js  .css 
			打包 整合的资源。
NodeJS
	环境，后台语言
	封装google v8引擎，js解析器
	npm包管理工具 
		包--模块--第三方模块
		npm
		 	node package manage
		下载依赖，删除依赖，更新依赖
		npm用的国外的镜像
	cnpm 淘宝镜像的npm工具
		npm install -g cnpm
			全局安装cnpm包
		cnpm install -g babel-cli

		用的是国内的镜像
	yarn 包管理工具  React
		yarn add babel-cli

NodeJS内置模块的介绍
	NodeJS后台语言
	内置模块：
		url   网址模块
		http  服务器模块，用http模块可以搭建服务器
		querystring  查询字符串模块
		path  文件的路径模块
	第三方模块：express框架 基于http模块的

项目的理解
	前端  HTML CSS JavaScript
	中台  NodeJS  请求-响应。
	后台  Java  Python C# PHP NodeJS

	文章管理  categoryId访问该栏目底下的文章
	$.ajax({
		...
		success:function(res){
			//获取所有的栏目，遍历到select上
			$.ajax({
				//通过categoryId访问该栏目底下的文章
				....
				data:{
					categoryId:1001,
				}
				success:function(){
					//遍历表格的数据
				}
			})
		}
	})

ES6中Promise承诺
	let p = new Promise(function(resolve,reject){
		//....异步
		$.ajax({
			....
			success:function(res){
				resolve(res);
			},
			error:function(error){
				reject(error);
			}
		})
	});
	p.then(function(res){
		console.log(res);
	}).catch(function(error){
		console.log(error);
	});

ES6
	用ES6写的代码，NodeJS绝大部分支持，浏览器的支持程度比较弱。
	项目最终要运行在浏览器上，ES6-->ES5
	使用Babel工具将ES6的代码转换成ES5的代码。
	babel工具的使用
		1.全局安装babel工具
			cnpm install -g babel-cli
		2.局部安装转换规则包
			cnpm install babel-preset-latest
			cnpm install babel-preset-es2015
			cnpm install babel-preset-env
		3.编写babel配置文件
			项目根目录 .babelrc
			{
				"presets":['latest']
			}
		4.转换
			babel a.js

	babel工具只转换语法层次的。
	babel-polyfill 垫片，将es6的功能性新特性转换成es5的代码

安装的位置
	全局安装  -g  --global
	局部安装  当前所处的目录位置安装

	node_modules  文件夹  放置第三方包的文件夹

	根目录  node_modules
		....
		day01
			node_modules
		 	app
		 		node_modules  babel-cli

使用npm安装cnpm
	npm install -g cnpm --registry=https://registry.npm.taobao.org

version 版本号
	-v
	--version

第三方包	
	
	package.json中记录了项目的相关的信息
		dependencies 产品阶段的依赖
		devDependencies  项目开发阶段需要的依赖
			cnpm install --save babel-cli
				dependencies:{
					babel-cli:''
				}
			cnpm install --save-dev babel-cli
				devDependencies:{
					babel-cli:''
				}

babel命令
	babel 文件名  将转换的结果输出到终端
	babel 文件名 --out-file 文件名
		babel 1-a.js --out-file 2-a.js
		babel 1-a.js --out-file dist/2-a.js
	babel 目录名 --out-dir 目录名
		将第一个目录名中的所有文件转换成es5的代码，输出到第二个目录底下的同名文件中


项目升级
	在安装依赖的时候需要记录，让使用该项目的人，一眼能看到项目的信息以及依赖。
	需要去写package.json

	babel-cli
	babel-preset-latest

package.json
	在项目底下执行
	cnpm init -y  快捷生成package.json文件
	cnpm init 生成package.json文件


项目升级
	1.package.json
		cnpm init -y
	2.下载了项目依赖
		cnpm install --save-dev babel-cli babel-preset-latest
	3.创建.babelrc
		{
			"presets":["latest"]
		}
	4.新增了指令
		在package.json的
		"scripts":{
			"start":"babel src --out-dir dist"
		}
	5.编写src底下的es6的代码
	6.转换
		babel src --out-dir dist
		cnpm run start
		npm run start

		npm run start
		npm run dev

		npm run start
		npm start
		npm run dev
		cnpm run start
		cnpm run dev
		babel src --out-dir dist
项目升级的好处
	1.可以在package.json中读取到需要的信息，项目依赖的包以及如何启动项目。
	2.拿到别人没有给node_modules的项目，需要先打开package.json，看看项目的依赖。去下载
		cnpm install   下载项目中的所有依赖。

let特点
	1.let {}代码块内的局部变量
	2.let声明的变量不提升
	3.暂时性死区现象
		在let 变量声明前使用
	4.在同一代码块内不可重复声明







