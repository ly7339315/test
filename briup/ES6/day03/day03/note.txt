let

const
	1.有块级作用域
	2.变量声明不提升
	3.暂时性死区
	4.不可重复声明
	5.在声明时初始化，不可修改值
解构
	数组解构
		let [a,b=2] = [1];
	对象的解构
		let {name:aName='lisi',age:aAge} = {
			name:'zhangsan',
			age:12
		}
		aName = 'zhangsan'
		aAge = 12;
	字符串的解构
		let {toString} = '123';
		let [a,b] = '123';
	数值的解构
		let {toString} = 123;
	布尔的解构
		let {toString} = true;
	使用：	
		函数变量的赋值
		function test([a,b]){}
		test([1,2]);
		function test({a,b}){}
		test({a:1,b:2});
	扩展运算符 ...
		...[1,2,3]
		...'hello'
	rest参数 ...变量   函数的形参
		可以用来接收剩余的实参
		function test(...tail){}
		test(1,2,3,5);

		let [a,...b] = [1,2,3,4];
对象的扩展
	属性简写
		let name = 'zhangsan';
		let age = 12;
		let obj = {
			name,
			age
		};
	方法的简写
		let obj = {
			sayName(){

			}
		};
	属性名表达式
		let name = "test";
		let obj = {
			[name]:'zhangsan',
			[name+'hello']:'hello'
		};
	Object.is(a,b)   ===
		+0 === -0 true
		NaN === NaN false

		isNaN()

		Object.is(+0,-0)  false
		Object.is(NaN,NaN)  true

对象浅复制   浅拷贝
	引用的复制
	let obj = {};
	let obj2 = obj;
对象深复制 深拷贝 内容的复制
	复制内部的内容
	let obj = {name:'zhangsan'};
	let obj2 = {name:'zhangsan'};
	let obj2 = JSON.parse(JSON.stringify(obj));

	//Object.assign(target,...tail) 对象的合并
	function myClone(target,...tail){

		return target;
	}
	myClone(
		{},
		{age:12},
		{gender:'男'}
	);














