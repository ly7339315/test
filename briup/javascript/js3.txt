1.continue和break的区别。
   1.break

   用break语句可以使流程跳出switch语句体，也可以用break语句在循环结构终止本层循环体，从而提前结束本层循环。

  使用说明：

（1）只能在循环体内和switch语句体内使用break；

（2）当break出现在循环体中的switch语句体内时，起作用只是跳出该switch语句体，并不能终止循环体的执行。若想强行终止循环体的执行，可以在循环体中，但并不在switch语句中设置break语句，满足某种条件则跳出本层循环体。

    2.continue

continue语句的作用是跳过本次循环体中余下尚未执行的语句，立即进行下一次的循环条件判定，可以理解为仅结束本次循环。

注意：continue语句并没有使整个循环终止。

扩展资料： 在while和do-while循环中，continue语句使得流程直接跳到循环控制条件的测试部分，然后决定循环是否继续进行。在for循环中，遇到continue后，跳过循环体中余下的语句，而去对for语句中的“表达式3”求值，然后进行“表达式2”的条件测试，最后根据“表达式2”的值来决定for循环是否执行。再循环体内，不论continue是作为何种语句中的成分，都将按上述功能执行，这点与break有所不同。

break：

(1).结束当前整个循环，执行当前循环下边的语句。忽略循环体中任何其它语句和循环条件测试。

(2).只能跳出一层循环，如果你的循环是嵌套循环，那么你需要按照你嵌套的层次，逐步使用break来跳出。

continue：

(1).终止本次循环的执行，即跳过当前这次循环中continue语句后尚未执行的语句，接着进行下一次循环条件的判断。 

(2).结束当前循环，进行下一次的循环判断。

(3).终止当前的循环过程，但他并不跳出循环,而是继续往下判断循环条件执行语句.他只能结束循环中的一次过程,但不能终止循环继续进行。

2.求1-100之间是3倍数的和
 var x = 0 ;
    for(i=1;i<=100;i++){
         if (i%3==0) {
         	
         	x += i;
         	
         }
    }
    console.log(x);//1683

3.var i=100
	i++;
  var j=i++;
  var y=++j;
  求：y和j分别是多少？
102 102

4.用循环，实现以下阶乘
	5! = 1 * 2 * 3 * 4 * 5 = 120

var num = 5;
var zxc = 1;
    var str = '';
	for(x = 1;x<=num;x++){
       
       zxc *= x;
        if(x<num){
       str  += x+'*';
        }else{
        	str += x;
        }
	}
	console.log(num+'!'+'='+ str+'='+zxc);
